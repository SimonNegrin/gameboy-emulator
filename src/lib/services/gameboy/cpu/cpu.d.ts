import { CpuRegisterCollection } from "./internal-registers/cpu-register-collection";
import { createCallAndReturnOperations } from "@/cpu/operations/create-call-and-return-operations";
import { createInterruptOperations } from "@/cpu/operations/create-interupt-operations";
import { createJumpOperations } from "@/cpu/operations/create-jump-operations";
import { createRotateShiftOperations } from "@/cpu/operations/create-rotate-shift-operations";
import { createGeneralPurposeOperations } from "@/cpu/operations/create-general-purpose-operations";
import { Operation } from "@/cpu/operations/operation.model";
import { createCbSubOperations } from "@/cpu/operations/cb-operations/cb-operation";
import { createLogicalOperations } from '@/cpu/operations/create-logical-operations';
import { createArithmeticOperations } from '@/cpu/operations/create-arithmetic-operations';
import { createInputOutputOperations } from '@/cpu/operations/create-input-output-operations';
export declare class CPU {
    static OperatingHertz: number;
    private static VBlankInterruptAddress;
    private static LCDStatusInterruptAddress;
    private static TimerOverflowInterruptAddress;
    private static SerialTransferCompletionInterruptAddress;
    private static P10P13InputSignalLowInterruptAddress;
    isInterruptMasterEnable: boolean;
    registers: CpuRegisterCollection;
    operationMap: Map<number, Operation>;
    cbSubOperationMap: Map<number, Operation>;
    createInputOutputOperations: typeof createInputOutputOperations;
    createArithmeticOperations: typeof createArithmeticOperations;
    createLogicalOperations: typeof createLogicalOperations;
    createRotateShiftOperations: typeof createRotateShiftOperations;
    createJumpOperations: typeof createJumpOperations;
    createGeneralPurposeOperations: typeof createGeneralPurposeOperations;
    createCallAndReturnOperations: typeof createCallAndReturnOperations;
    createInterruptOperations: typeof createInterruptOperations;
    createCbSubOperations: typeof createCbSubOperations;
    private timerCycles;
    private frequencyCounter;
    private cycleMultiplier;
    private isHalted;
    private isStopped;
    constructor();
    initialize(): void;
    tick(): number;
    reset(): void;
    halt(): void;
    stop(): void;
    pushToStack(word: number): void;
    popFromStack(): number;
    private getOperation;
    private handleInterrupts;
    updateTimers(cycles: number): void;
    addOperation(operation: Operation): void;
    addCbOperation(operation: Operation): void;
}
